{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//todo : Solidity style guid\n\n//! 1. Pragma statements\npragma solidity ^0.8.8;\n\n//! 2. Import statements\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n//! 3. Interfaces,\n//! 4. Libraries\n//! 5 Contracts\n\n// TODO: @title contract untuk dalam menaruh dana\n// ?: @author Ruka-sarashina\n// !: @notice contract ini dibuat untuk demo menaruh dana\n// TODO: @dev ini adalah implementasi priceFeed sebagai libray\n\nerror FundMe_NotOwner();\n\ncontract FundMe {\n    //! Type declaration\n    using PriceConverter for uint256;\n\n    //! State variabel\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n\n    address private immutable i_owner;\n    uint256 public constant MINIMUMUSD = 50 * 1e18;\n\n    AggregatorV3Interface public s_priceFeed; //? terjadi interacting libray\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe_NotOwner();\n        }\n        _;\n    }\n\n    /** Order of function\n     * constructor\n     * receive function (if exists)\n     * fallback function (if exists)\n     * external\n     * public\n     * internal\n     * private\n     */\n\n    constructor(address priceFeedAddress) {\n        //! constructor adalah sebuah fungsi yang akan selalu di render(panggil) pertama\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n    \n    function fund() public payable {\n        require(\n            //todo getConversionRate tambah parameter untuk menerima priceFeed\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUMUSD,\n            \"Kurang dari minimum\"\n        );\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSucces, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSucces, \"Call Failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner{\n        address[] memory funders = s_funders;\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value:  address(this).balance}(\"\");\n        require(success, \"Failed Withdraw\");\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns(address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)  public view returns(uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n\n}\n\n// Explainer from: https://solidity-by-example.org/fallback/\n// Ether is sent to contract\n//      is msg.data empty?\n//          /   \\\n//         yes  no\n//         /     \\\n//    receive()?  fallback()\n//     /   \\\n//   yes   no\n//  /        \\\n//receive()  fallback()\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    //* penambahan AggregatorV3Interface priceFeed untuk getConversionRate \n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) { \n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        );\n        return priceFeed.version();\n    }\n\n    function getConversionRate(\n        uint256 ehtAmount,\n        AggregatorV3Interface priceFeed //* penambahan parameter untuk FundMe\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed); //* penambahan priceFeed parameter\n\n        uint256 ehtAmountInUsd = (ethPrice * ehtAmount) / 1e18;\n        return ehtAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}